Generated by:

$ ack '(;?)\s*\(defproperty\s+([^\s]+)' --output '\t$1\t$2' --group

ack can be found at betterthangrep.com

~~~

basic-boolean-algebra.lisp
3:		and-commutes
9:		and-demorgan
15:		and-absorption
21:		or-implication
27:		true-incognito
33:		implication
38:		absurdidity

basic-lists.lisp
5:		zero-length-means-empty
14:		sum-over-cons
19:		append-one-value-equal-cons
24:		length-always->=-zero
33:	;	evens-returns-list-lemma
37:	;	evens-halves-length

big-distributive-property.lisp
13:		sum-each-*-c-equals-c-*-sum

big-or.lisp
8:		or-returns-t-with-any-t

concat.lisp
18:		append-additive
23:		append-associative
34:		xs-is-a-prefix-of-append-xs-ys

exponentiation.lisp
18:		rp-equivalent-to-pow

isort.lisp
15:		insert-works
25:		isort-works

lg.lisp
21:		lg-reverses-pow-2

maximum.lisp
13:		maximum->=-any-member
19:		maximum-xs-comes-from-xs

nat-from-digits.lisp
31:		horners-rule-works

not-working/avl.lisp
38:		full-tree

not-working/mux.lisp
10:		mux-works

not-working/reverse.lisp
3:		reverse-plus-one

not-working/running-sum.lisp
14:		sumr-equals-sum

not-working/sets.lisp
3:		subset-chain-rule
12:	;	union-commutes
20:	;	intersect-works
30:	;	demorgan-union

not-working/sorting.lisp
63:		qsort-preserves-elements
69:		qsort-conserves-elements
75:	;	my-msort-works
79:		qsort-works
83:	;	msort-equals-qsort

not-working/string-maximum.lisp
19:		maximum-greater-than-any-member-2
24:	;	maximum-greater-than-any-member

SE Definitions and Theorems/Not Working/mux-dmx-thms.lisp
5:		dmx-preserves-length-tst
11:		dmx-conservation-of-elements
18:	;	dmx-evens=xs-tst
23:	;	dmx-odds=ys-tst
28:		mux-preserves-length-tst
34:	;	mux-conservation-of-elements
42:	;	mux-evens=xs-tst
50:	;	mux-odds=ys-tst
57:	;	dmx-inverts-mux-tst
64:	;	mux-inverts-dmx-tst

SE Definitions and Theorems/Working/append-thm.lisp
4:		append-is-associative

SE Definitions and Theorems/Working/demorgans.lisp
8:		demorgan-or
14:		demorgan-and

SE Definitions and Theorems/Working/nthcdr-thms.lisp
4:		nthcdr-reduces-length

SE Definitions and Theorems/Working/rac-rdc-snoc-thms.lisp
5:		rac-tst
9:		rdc-tst
13:		snoc-tst
19:		rac/snoc-identity
24:		rdc/snoc-identity
29:		rac/rdc/snoc-identity
34:		len-is-natural-number
37:		len-is-natural-n
40:		len-def-tst

SE Definitions and Theorems/Working/split-blocks-concat-thms.lisp
4:		split-len-tst
10:		split-len<-tst
16:		split-inv-tst
23:		concat-additive-len-tst
26:		concat-conservation-tst
32:		blocks-inv-tst
