; Definitions specify axiomatic properties
(in-package "ACL2") ; form importable "book"

;(defun split (n xs)
;  (if (and (posp n) (consp xs))
;      (list (cons (car xs)
;                  (car (split (- n 1) (cdr xs))))
;            (cadr (split (- n 1) (cdr xs))))
;      (list nil xs)))
;(defun insert-first (x xsys)
;  (list (cons x (car xsys))
;        (cadr xsys)))
;(defun split (n xs)
;  (if (and (posp n) (consp xs))
;      (insert-first (car xs) 
;                    (split (- n 1) (cdr xs)))
;      (list nil xs)))
(defun split (n xs)
  (if (and (posp n) (consp xs))
      (let* ((x  (car xs))
             (s  (split (- n 1) (cdr xs)))
             (fr (car s))
             (bk (cadr s)))
        (list (cons x fr) bk))
      (list nil xs)))
(defun firstN (n xs)
  (car (split n xs)))
(defun concat (xss)
  (if (consp xss)
      (append (car xss) (concat (cdr xss)))
      xss))
(defun total-len (xss)
  (if (consp xss)
      (+ (len (car xss)) (total-len (cdr xss)))
      0))
(defun member-one+ (x xss)
  (if (consp xss)
      (or (member-equal x (car xss))
          (member-one+ x (cdr xss)))
      nil))
(defun blocks (n xs)
  (if (and (posp n) (consp xs))
      (let* ((s  (split n xs))
             (fr (car s))
             (bk (cadr s)))
        (cons fr (blocks n bk)))
      nil))
